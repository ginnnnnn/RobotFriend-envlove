{"version":3,"sources":["components/Card.js","components/CardList.js","SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","_ref","robot","cardSet","react_default","a","createElement","className","src","concat","name","alt","username","email","CardList","robots","searchField","CardArray","filter","toLowerCase","includes","map","updatedCard","components_Card","key","id","length","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","handleSearchChange","event","_this","target","value","handleCardSetChange","rn","Math","floor","random","prevState","_this2","fetch","then","res","json","users","_this$state","src_SearchBox","onClick","components_Scroll","components_ErrorBoundry","components_CardList","Boolean","window","location","hostname","match","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f43b7b82.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Card = ({ robot, cardSet }) => {\n  return (\n    <div className=\"bg-light-pink dib pa3 ma2 br3 grow bw2 shadow-5 tc w-75 w5-ns\">\n      <img\n        src={`https://robohash.org/set_set${cardSet}/${\n          robot.name\n        }?size=200x200`}\n        alt=\"robots\"\n      />\n      <div>\n        <h2>{robot.username}</h2>\n        <p>{robot.email}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"./Card\";\n\nconst CardList = ({ robots, searchField, cardSet }) => {\n  // if (true) {\n  //   throw new Error(\"Nooo\");\n  // }\n  //this is for test ErrorBoundry\n  let CardArray = robots.filter(robot => {\n    return robot.username.toLowerCase().includes(searchField.toLowerCase());\n  });\n\n  CardArray = CardArray.map(updatedCard => {\n    return <Card robot={updatedCard} key={updatedCard.id} cardSet={cardSet} />;\n  });\n\n  return (\n    <div>{CardArray.length === 0 ? <h1>no matched cards</h1> : CardArray}</div>\n  );\n};\n\nexport default CardList;\n","import React from \"react\";\n\nconst SearchBox = ({ searchChange }) => {\n  return (\n    <div className=\"pa2\">\n      <input\n        className=\"pa3 ba b--green bg-lightest-blue\"\n        type=\"search\"\n        placeholder=\"type n search\"\n        onChange={searchChange}\n      />\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React from \"react\";\n\nconst Scroll = props => {\n  return (\n    <div\n      className=\"overflow-y-scroll bt bw2 b--blue\"\n      style={{ height: \"600px\" }}\n    >\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;\n","import React, { Component } from \"react\";\n\nclass ErrorBoundry extends Component {\n  state = {\n    hasError: false\n  };\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  } // this on;ly fire when it catch error\n  render() {\n    if (this.state.hasError) {\n      return <h1>Ooops Something goes wrong!!</h1>;\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundry;\n","import React, { Component } from \"react\";\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../SearchBox\";\nimport Scroll from \"../components/Scroll\";\nimport ErrorBoundry from \"../components/ErrorBoundry\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    robots: [],\n    searchField: \"\",\n    cardSet: 1\n  };\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(res => res.json()) //convert to json, json()\n      .then(users => this.setState({ robots: users }));\n  }\n\n  handleSearchChange = event => {\n    this.setState({ searchField: event.target.value });\n  };\n  handleCardSetChange = event => {\n    const rn = Math.floor(Math.random() * 2) + 1; //return 1 or 2\n    if (this.state.cardSet <= 2) {\n      this.setState(prevState => {\n        return { cardSet: prevState.cardSet + rn };\n      });\n    } else {\n      this.setState(prevState => {\n        return { cardSet: prevState.cardSet - rn };\n      });\n    }\n  };\n\n  render() {\n    const { robots, searchField, cardSet } = this.state;\n    if (!robots.length) {\n      //if length === 0 ,in js mean false,!false ===true\n      return <h1 className=\"tc\">Loading</h1>;\n    }\n    return (\n      <div className=\"tc\">\n        <h1 className=\"f1 fw2 navy\">Robot friends</h1>\n\n        <div className=\"flex justify-center\">\n          <SearchBox\n            searchChange={this.handleSearchChange}\n            searchField={searchField}\n          />\n          <button\n            className=\"ba br3 pa2 ma2 grow bg-gold w4\"\n            onClick={this.handleCardSetChange}\n          >\n            switch\n          </button>\n        </div>\n        <Scroll>\n          <ErrorBoundry>\n            <CardList\n              robots={robots}\n              searchField={searchField}\n              cardSet={cardSet}\n            />\n          </ErrorBoundry>\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"tachyons\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}